version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: ai-data-agent-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ai_data_agent
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ai-agent-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: ai-data-agent-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-data-agent-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # MongoDB Configuration
      MONGODB_URL: mongodb://admin:password123@mongodb:27017/ai_data_agent?authSource=admin
      MONGODB_DB_NAME: ai_data_agent
      MONGODB_COLLECTION_NAME: structured_data
      
      # Groq API Configuration
      GROQ_API_KEY: ${GROQ_API_KEY}
      GROQ_MODEL: llama3-70b-8192
      
      # FastAPI Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_RELOAD: "false"
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost", "http://frontend"]'
      
      # Search Configuration
      VECTOR_DIMENSION: 1536
      SEARCH_LIMIT: 50
      SIMILARITY_THRESHOLD: 0.7
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your_secret_key_here_change_in_production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Logging
      LOG_LEVEL: INFO
      LOG_FILE: app.log
      
      # Cache Configuration
      REDIS_URL: redis://:redis123@redis:6379
      CACHE_TTL: 3600
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: 60
      RATE_LIMIT_PER_HOUR: 1000
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-data-agent-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      REACT_APP_API_BASE_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000/ws
      REACT_APP_ENV: production
      REACT_APP_VERSION: 1.0.0
    depends_on:
      - backend
    networks:
      - ai-agent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional - for scaling)
  nginx:
    image: nginx:alpine
    container_name: ai-data-agent-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ai-agent-network
    profiles:
      - load-balancer

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-agent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16