name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      env:
        MONGODB_URL: mongodb://localhost:27017
        GROQ_API_KEY: test_key
        SECRET_KEY: test_secret_key
      run: |
        cd backend
        pytest tests/ -v
    
    - name: Lint backend code
      run: |
        cd backend
        black --check app/
        isort --check-only app/
        flake8 app/

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 30

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      run: |
        cd backend
        docker build -t ai-data-agent-backend:test .
    
    - name: Build frontend image
      run: |
        cd frontend
        docker build -t ai-data-agent-frontend:test .
    
    - name: Test Docker Compose
      run: |
        echo \"GROQ_API_KEY=test_key\" > .env
        docker-compose -f docker-compose.yml config

  # Deploy to staging (only on main branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://ai-data-agent-staging.herokuapp.com
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_STAGING_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        dockerfile_directory: ./backend
        dockerfile_name: Dockerfile
        docker_heroku_process_type: web
    
    - name: Notify deployment
      run: |
        echo \"Deployment to staging completed successfully\"
        echo \"URL: https://ai-data-agent-staging.herokuapp.com\"

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install locust
    
    - name: Start backend
      env:
        MONGODB_URL: mongodb://localhost:27017
        GROQ_API_KEY: test_key
        SECRET_KEY: test_secret_key
      run: |
        cd backend
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        # Add performance tests using locust or similar
        curl -f http://localhost:8000/health || exit 1
        echo \"Performance tests would run here\"

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=ai-data-agent
          -Dsonar.organization=your-org
          -Dsonar.sources=.
          -Dsonar.exclusions=**/node_modules/**,**/venv/**

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Python dependencies
      run: |
        cd backend
        pip install safety
        safety check -r requirements.txt
    
    - name: Check Node.js dependencies
      run: |
        cd frontend
        npm audit --audit-level moderate